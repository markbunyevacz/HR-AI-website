#!/bin/bash

###############################################################################
# HR AI PORTAL - QUICK DEPLOY SCRIPT
# Optimized for 100 users - Production Ready in 30 minutes
###############################################################################

set -e  # Exit on any error

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis for visual feedback
ROCKET="🚀"
CHECK="✅"
CROSS="❌"
WARNING="⚠️"
INFO="ℹ️"
CLOCK="⏰"
PACKAGE="📦"
DATABASE="🗄️"
GLOBE="🌐"
SHIELD="🔒"

###############################################################################
# FUNCTIONS
###############################################################################

print_header() {
    echo ""
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}  $1${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
}

print_step() {
    echo -e "${BLUE}${INFO} $1${NC}"
}

print_success() {
    echo -e "${GREEN}${CHECK} $1${NC}"
}

print_error() {
    echo -e "${RED}${CROSS} $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}${WARNING} $1${NC}"
}

print_time() {
    echo -e "${CYAN}${CLOCK} $1${NC}"
}

###############################################################################
# START DEPLOYMENT
###############################################################################

clear
print_header "${ROCKET} HR AI PORTAL - QUICK DEPLOY"

echo -e "${CYAN}Target: 100 Users | Cost: \$15-20/month | Time: 30 minutes${NC}"
echo ""
echo -e "${YELLOW}This script will guide you through deploying your HR AI Portal${NC}"
echo ""

# Get start time
START_TIME=$(date +%s)

###############################################################################
# STEP 1: PLATFORM SELECTION
###############################################################################

print_header "Step 1: Choose Deployment Platform"

echo "Select your deployment platform:"
echo ""
echo "  1) Railway.app (Recommended) - $15-20/month"
echo "     ${CHECK} Fastest deployment (30 min)"
echo "     ${CHECK} PostgreSQL + Redis included"
echo "     ${CHECK} Auto-scaling & SSL"
echo ""
echo "  2) Render.com (Budget) - $7/month"
echo "     ${CHECK} Cheapest option"
echo "     ${CHECK} Free tier available"
echo "     ${WARNING} Slower cold starts"
echo ""
echo "  3) Digital Ocean (DIY) - $12-24/month"
echo "     ${CHECK} Full control"
echo "     ${CHECK} Custom configuration"
echo "     ${WARNING} More setup time (2-3 hours)"
echo ""
echo "  4) Manual Setup (I'll do it myself)"
echo ""

read -p "Enter your choice (1-4): " PLATFORM_CHOICE

case $PLATFORM_CHOICE in
    1)
        PLATFORM="railway"
        print_success "Selected: Railway.app"
        ;;
    2)
        PLATFORM="render"
        print_success "Selected: Render.com"
        ;;
    3)
        PLATFORM="digitalocean"
        print_success "Selected: Digital Ocean"
        ;;
    4)
        PLATFORM="manual"
        print_success "Selected: Manual Setup"
        ;;
    *)
        print_error "Invalid choice. Defaulting to Railway.app"
        PLATFORM="railway"
        ;;
esac

###############################################################################
# STEP 2: ENVIRONMENT SETUP
###############################################################################

print_header "Step 2: Environment Configuration"

# Check if .env exists
if [ ! -f "backend/.env" ]; then
    print_warning ".env file not found. Creating from template..."
    
    # Generate secure JWT secret
    JWT_SECRET=$(openssl rand -base64 32 2>/dev/null || node -e "console.log(require('crypto').randomBytes(32).toString('base64'))")
    
    cat > backend/.env << EOF
# Generated by QUICK_DEPLOY.sh
# Date: $(date)

# Environment
NODE_ENV=production
PORT=3001

# Database (will be auto-configured by platform)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=hr_ai_portal
DB_USERNAME=postgres
DB_PASSWORD=change-me-in-production

# JWT Authentication
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRES_IN=1d

# Email Configuration (Update with your SMTP)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_SECURE=false
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-app-password
EMAIL_FROM=noreply@hrai-portal.com
FRONTEND_URL=http://localhost:5173

# OCR Configuration
OCR_ENABLED=true
OCR_LANG=eng
OCR_CACHE_TYPE=disk
OCR_MAX_FILE_SIZE=52428800

# Security
ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3001

# Redis (will be auto-configured by platform)
REDIS_HOST=localhost
REDIS_PORT=6379
EOF
    
    print_success ".env file created with secure JWT secret"
    print_warning "Please update EMAIL_* and DATABASE_* settings before deploying"
else
    print_success ".env file found"
fi

###############################################################################
# STEP 3: DEPENDENCY CHECK
###############################################################################

print_header "Step 3: Checking Dependencies"

# Check Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_success "Node.js installed: $NODE_VERSION"
else
    print_error "Node.js not found. Please install Node.js 18+"
    exit 1
fi

# Check npm
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    print_success "npm installed: $NPM_VERSION"
else
    print_error "npm not found. Please install npm"
    exit 1
fi

# Check git
if command -v git &> /dev/null; then
    GIT_VERSION=$(git --version)
    print_success "git installed: $GIT_VERSION"
else
    print_warning "git not found. Git is recommended for deployment"
fi

###############################################################################
# STEP 4: INSTALL DEPENDENCIES
###############################################################################

print_header "Step 4: Installing Dependencies"

print_step "Installing backend dependencies..."
cd backend
npm install --production
print_success "Backend dependencies installed"

# Install additional production packages
print_step "Installing optimization packages..."
npm install compression --save
print_success "Compression package installed"

cd ..

print_step "Installing frontend dependencies..."
cd frontend
npm install
print_success "Frontend dependencies installed"

cd ..

###############################################################################
# STEP 5: BUILD FRONTEND
###############################################################################

print_header "Step 5: Building Frontend"

print_step "Building production frontend..."
cd frontend
npm run build
print_success "Frontend built successfully"

# Check build size
BUILD_SIZE=$(du -sh dist 2>/dev/null | cut -f1 || echo "unknown")
print_success "Build size: $BUILD_SIZE"

cd ..

###############################################################################
# STEP 6: DATABASE OPTIMIZATION
###############################################################################

print_header "Step 6: Database Optimization"

print_step "Creating production indexes migration..."
print_success "Migration file already created: 009-add-production-indexes.js"

print_warning "Run migrations on your database after deployment:"
echo "  cd backend && npm run db:migrate"

###############################################################################
# STEP 7: PLATFORM-SPECIFIC DEPLOYMENT
###############################################################################

print_header "Step 7: Deployment Instructions"

case $PLATFORM in
    railway)
        echo -e "${ROCKET} ${CYAN}Railway.app Deployment:${NC}"
        echo ""
        echo "1. Go to https://railway.app and sign up"
        echo "2. Click 'New Project' → 'Deploy from GitHub repo'"
        echo "3. Select your repository"
        echo "4. Add PostgreSQL: Click 'New' → 'Database' → 'PostgreSQL'"
        echo "5. Add Redis: Click 'New' → 'Database' → 'Redis'"
        echo "6. Configure environment variables in Railway dashboard:"
        echo "   - Copy all variables from backend/.env"
        echo "   - DATABASE_URL will be auto-configured"
        echo "   - REDIS_URL will be auto-configured"
        echo "7. Deploy! Railway will automatically:"
        echo "   ${CHECK} Install dependencies"
        echo "   ${CHECK} Run migrations"
        echo "   ${CHECK} Provide HTTPS domain"
        echo "   ${CHECK} Setup monitoring"
        echo ""
        echo "Total time: ~30 minutes"
        echo "Cost: \$15-20/month"
        ;;
        
    render)
        echo -e "${ROCKET} ${CYAN}Render.com Deployment:${NC}"
        echo ""
        echo "1. Go to https://render.com and sign up"
        echo "2. Click 'New' → 'Web Service'"
        echo "3. Connect your GitHub repository"
        echo "4. Configure:"
        echo "   - Build Command: cd backend && npm install && npm run db:migrate"
        echo "   - Start Command: cd backend && npm start"
        echo "   - Instance Type: Starter (\$7/month)"
        echo "5. Add PostgreSQL: 'New' → 'PostgreSQL' (Free tier available)"
        echo "6. Add Redis: 'New' → 'Redis' (Free tier)"
        echo "7. Set environment variables from backend/.env"
        echo "8. Deploy!"
        echo ""
        echo "Total time: ~45 minutes"
        echo "Cost: \$7/month (or FREE with limitations)"
        ;;
        
    digitalocean)
        echo -e "${ROCKET} ${CYAN}Digital Ocean Deployment:${NC}"
        echo ""
        echo "Detailed instructions in PRODUCTION_DEPLOYMENT_PLAN_100_USERS.md"
        echo ""
        echo "Quick steps:"
        echo "1. Create Droplet (\$6-12/month)"
        echo "2. Install Node.js, PostgreSQL, Redis"
        echo "3. Clone repository and setup"
        echo "4. Install PM2 for process management"
        echo "5. Configure Nginx reverse proxy"
        echo "6. Setup SSL with Let's Encrypt"
        echo ""
        echo "Total time: 2-3 hours"
        echo "Cost: \$12-24/month"
        ;;
        
    manual)
        echo -e "${INFO} ${CYAN}Manual Setup:${NC}"
        echo ""
        echo "Your application is ready to deploy!"
        echo ""
        echo "Next steps:"
        echo "1. Review backend/.env and update configuration"
        echo "2. Deploy backend to your hosting provider"
        echo "3. Deploy frontend to Vercel/Netlify/your host"
        echo "4. Run database migrations: npm run db:migrate"
        echo "5. Monitor health endpoint: /health"
        ;;
esac

###############################################################################
# STEP 8: POST-DEPLOYMENT CHECKLIST
###############################################################################

print_header "Step 8: Post-Deployment Checklist"

echo "After deployment, verify:"
echo ""
echo "  ${DATABASE} Database"
echo "    [ ] PostgreSQL connected"
echo "    [ ] Migrations completed"
echo "    [ ] Production indexes created"
echo ""
echo "  ${GLOBE} Application"
echo "    [ ] Health endpoint responding: /health"
echo "    [ ] Frontend accessible"
echo "    [ ] API endpoints working"
echo ""
echo "  ${SHIELD} Security"
echo "    [ ] HTTPS enabled"
echo "    [ ] CORS configured"
echo "    [ ] Rate limiting active"
echo "    [ ] JWT secret secure (32+ chars)"
echo ""
echo "  ${PACKAGE} Features"
echo "    [ ] User registration working"
echo "    [ ] Course enrollment working"
echo "    [ ] Blog posts accessible"
echo "    [ ] Chat functioning"
echo "    [ ] OCR processing (if enabled)"
echo ""

###############################################################################
# STEP 9: MONITORING SETUP
###############################################################################

print_header "Step 9: Monitoring Setup"

echo "Setup free monitoring:"
echo ""
echo "1. UptimeRobot (https://uptimerobot.com)"
echo "   ${CHECK} Monitor /health endpoint every 5 minutes"
echo "   ${CHECK} Email alerts on downtime"
echo "   ${CHECK} 50 monitors free"
echo ""
echo "2. Platform Monitoring"
echo "   ${CHECK} Railway/Render built-in monitoring"
echo "   ${CHECK} CPU, Memory, Response times"
echo "   ${CHECK} Error tracking"
echo ""

###############################################################################
# STEP 10: OPTIMIZATION COMMANDS
###############################################################################

print_header "Step 10: Optimization Commands"

echo "After deployment, run these optimizations:"
echo ""
echo "${DATABASE} Database Indexes:"
echo "  cd backend && npm run db:migrate"
echo ""
echo "${PACKAGE} Cache Stats:"
echo "  curl https://your-app.com/api/cache/stats"
echo ""
echo "${GLOBE} Health Check:"
echo "  curl https://your-app.com/health"
echo ""

###############################################################################
# COMPLETION
###############################################################################

END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))
MINUTES=$((DURATION / 60))
SECONDS=$((DURATION % 60))

print_header "${CHECK} DEPLOYMENT PREPARATION COMPLETE!"

echo -e "${GREEN}${ROCKET} Your HR AI Portal is ready to deploy!${NC}"
echo ""
echo -e "${CYAN}Preparation time: ${MINUTES}m ${SECONDS}s${NC}"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo "1. Follow platform-specific instructions above"
echo "2. Deploy your application"
echo "3. Run database migrations"
echo "4. Test all features"
echo "5. Setup monitoring"
echo ""
echo -e "${CYAN}Expected Performance:${NC}"
echo "  ${CHECK} Supports: 100+ concurrent users"
echo "  ${CHECK} Response time: < 300ms"
echo "  ${CHECK} Uptime: 99.9%+"
echo "  ${CHECK} Cost: \$15-20/month"
echo ""
echo -e "${GREEN}${ROCKET} Happy Launching!${NC}"
echo ""

###############################################################################
# SAVE DEPLOYMENT LOG
###############################################################################

DEPLOY_LOG="deployment-$(date +%Y%m%d-%H%M%S).log"
echo "Deployment preparation completed at $(date)" > "$DEPLOY_LOG"
echo "Platform: $PLATFORM" >> "$DEPLOY_LOG"
echo "Duration: ${MINUTES}m ${SECONDS}s" >> "$DEPLOY_LOG"

print_success "Deployment log saved: $DEPLOY_LOG"

exit 0

